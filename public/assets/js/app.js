// Ortak inline mesaj fonksiyonu
window.showMsg = (text, type = "info") => {
  const el = document.getElementById("alerts");
  if (!el) return;
  
  let alertClass = "alert-info"; // varsayƒ±lan
  if (type === "error") {
    alertClass = "alert-error";
  } else if (type === "success") {
    alertClass = "alert-info"; // success i√ßin de info kullan (CSS'de success yok)
  }
  
  el.innerHTML = `<div class="alert ${alertClass}">${text}</div>`;
  setTimeout(() => {
    el.innerHTML = "";
  }, 4000);
};

// Form submit - DOMContentLoaded i√ßinde eklenmeli
function setupFormSubmit() {
  const joinForm = document.getElementById("joinForm");
  if (!joinForm) return;
  
  joinForm.addEventListener("submit", (e) => {
    e.preventDefault();

    const username = document.getElementById("username")?.value?.trim();
    let room = document.getElementById("room")?.value?.trim();
    const submitButton = e.target.querySelector('button[type="submit"]');

    // Kullanƒ±cƒ± adƒ± bo≈üsa hata mesajƒ±
    if (!username) {
      showMsg("Kullanƒ±cƒ± adƒ± bo≈ü olamaz!", "error");
      return;
    }

    // Butonu ge√ßici olarak devre dƒ±≈üƒ± bƒ±rak
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = "Katƒ±lƒ±yor...";
    }

    // Eƒüer oda bo≈üsa random √ºret
    if (!room) {
      room = Math.random().toString(36).substring(2, 8);
    }

    // Oda kodunu case-insensitive yap (k√º√ß√ºk harfe √ßevir)
    room = room.toLowerCase();

    // LocalStorage'a kullanƒ±cƒ± adƒ±nƒ± kaydet
    localStorage.setItem("username", username);

    // Son odalarƒ± listeye ekle (en fazla 5 tane)
    let rooms = JSON.parse(localStorage.getItem("recentRooms") || "[]");
    if (!rooms.includes(room)) {
      rooms.unshift(room);
      if (rooms.length > 5) rooms = rooms.slice(0, 5);
      localStorage.setItem("recentRooms", JSON.stringify(rooms));
    }

    // Kƒ±sa bir gecikme ile odaya y√∂nlendir (buton durumunu g√∂rmek i√ßin)
    setTimeout(() => {
      window.location.href = `room.html?room=${room}`;
    }, 500);
  });
}

// Sayfa y√ºklenince localStorage'dan verileri y√ºkle ve son odalar listesini doldur
window.addEventListener("DOMContentLoaded", () => {
  // Form submit event listener'ƒ±nƒ± ekle
  setupFormSubmit();
  
  // √ñnce localStorage'dan verileri y√ºkle
  loadDataFromLocalStorage();
  
  const ul = document.getElementById("recentRooms");
  if (!ul) return;
  const rooms = JSON.parse(localStorage.getItem("recentRooms") || "[]");
  rooms.forEach((r) => {
    const li = document.createElement("li");
    const a = document.createElement("a");
    a.href = `room.html?room=${r}`;
    a.textContent = r;
    li.appendChild(a);
    ul.appendChild(li);
  });

  // ƒ∞statistikleri g√ºncelle
  updateStats();
  
  // Son aktiviteleri g√ºncelle
  updateRecentActivity();
  
  // Hemen tekrar dene (baƒülantƒ± gecikmesi i√ßin)
  setTimeout(() => {
    updateStats();
    updateRecentActivity();
  }, 500);
  
  // ƒ∞statistikleri her 5 saniyede bir g√ºncelle
  setInterval(updateStats, 5000);
  
  // Aktiviteleri her 15 saniyede bir g√ºncelle
  setInterval(updateRecentActivity, 15000);
  
  // Baƒülantƒ± durumunu g√∂ster
  showConnectionStatus();
});

// LocalStorage'dan verileri y√ºkle
function loadDataFromLocalStorage() {
  try {
    // ƒ∞statistikleri y√ºkle
    const savedStats = JSON.parse(localStorage.getItem("scrumPokerStats") || "{}");
    if (savedStats.totalRooms !== undefined) {
      const totalRoomsEl = document.getElementById("totalRooms");
      const activeUsersEl = document.getElementById("activeUsers");
      const totalVotesEl = document.getElementById("totalVotes");
      const avgPointsEl = document.getElementById("avgPoints");
      
      if (totalRoomsEl) totalRoomsEl.textContent = savedStats.totalRooms || "0";
      if (activeUsersEl) activeUsersEl.textContent = savedStats.activeUsers || "0";
      if (totalVotesEl) totalVotesEl.textContent = savedStats.totalVotes || "0";
      if (avgPointsEl) avgPointsEl.textContent = savedStats.avgPoints || "0.0";
    }
    
    // Aktiviteleri y√ºkle
    const savedActivities = JSON.parse(localStorage.getItem("scrumPokerActivities") || "[]");
    const activityList = document.getElementById("recentActivity");
    if (activityList && savedActivities.length > 0) {
      activityList.innerHTML = savedActivities
        .map(activity => `
          <div class="activity-item">
            <span class="activity-time">${activity.time}</span>
            <span class="activity-text">${activity.text}</span>
          </div>
        `)
        .join("");
    }
  } catch (error) {
    console.error("LocalStorage'dan veri y√ºklenirken hata:", error);
  }
}

// Global socket baƒülantƒ±sƒ±
let globalSocket = null;

// Socket baƒülantƒ±sƒ±nƒ± ba≈ülat
function initSocket() {
  if (!window.io) {
    console.error("Socket.IO bulunamadƒ±!");
    return null;
  }
  
  if (globalSocket && globalSocket.connected) {
    console.log("Mevcut socket baƒülantƒ±sƒ± kullanƒ±lƒ±yor");
    return globalSocket;
  }
  
  console.log("Yeni Socket.IO baƒülantƒ±sƒ± kuruluyor...");
  // Localhost kontrol√º - hem localhost hem de 127.0.0.1'i kontrol et
  const isLocal = location.hostname === "localhost" || 
                  location.hostname === "127.0.0.1" || 
                  location.hostname.includes("127.0.0.1");
  
  const socketUrl = isLocal ? "http://localhost:3001" : window.location.origin;
  console.log("Socket.IO baƒülantƒ± URL'i:", socketUrl);
  
  globalSocket = io(socketUrl, {
    timeout: 20000, // 20 saniye timeout
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000
  });
  
  globalSocket.on("connect", () => {
    console.log("‚úÖ Socket.IO ba≈üarƒ±yla baƒülandƒ±!");
    
    // Baƒülantƒ± kurulur kurulmaz hemen istatistikleri al
    setTimeout(() => {
      updateStats();
      updateRecentActivity();
    }, 100);
  });
  
  globalSocket.on("connect_error", (error) => {
    console.error("‚ùå Socket.IO baƒülantƒ± hatasƒ±:", error);
  });
  
  globalSocket.on("disconnect", (reason) => {
    console.log("üîå Socket.IO baƒülantƒ±sƒ± kesildi:", reason);
  });
  
  globalSocket.on("reconnect", (attemptNumber) => {
    console.log("üîÑ Socket.IO yeniden baƒülandƒ±, deneme:", attemptNumber);
  });
  
  globalSocket.on("reconnect_error", (error) => {
    console.error("üîÑ Socket.IO yeniden baƒülantƒ± hatasƒ±:", error);
  });
  
  return globalSocket;
}

// ƒ∞statistikleri g√ºncelle
function updateStats() {
  console.log("updateStats √ßaƒürƒ±ldƒ±");
  
  // √ñnce localStorage'dan mevcut istatistikleri y√ºkle
  const savedStats = JSON.parse(localStorage.getItem("scrumPokerStats") || "{}");
  
  const socket = initSocket();
  if (!socket) {
    console.log("Socket baƒülantƒ±sƒ± kurulamadƒ±, localStorage'dan y√ºkleniyor");
    // localStorage'dan y√ºkle
    const totalRoomsEl = document.getElementById("totalRooms");
    const activeUsersEl = document.getElementById("activeUsers");
    const totalVotesEl = document.getElementById("totalVotes");
    const avgPointsEl = document.getElementById("avgPoints");
    
    if (totalRoomsEl) totalRoomsEl.textContent = savedStats.totalRooms || "0";
    if (activeUsersEl) activeUsersEl.textContent = savedStats.activeUsers || "0";
    if (totalVotesEl) totalVotesEl.textContent = savedStats.totalVotes || "0";
    if (avgPointsEl) avgPointsEl.textContent = savedStats.avgPoints || "0.0";
    return;
  }
  
  if (socket.connected) {
    console.log("Socket.IO baƒülandƒ±, istatistikler isteniyor...");
    
    // Hemen istatistik iste
    socket.emit("getStats", (stats) => {
      console.log("Sunucudan gelen istatistikler:", stats);
      if (stats) {
        // ƒ∞statistikleri localStorage'a kaydet
        const statsToSave = {
          totalRooms: stats.totalRooms || 0,
          activeUsers: stats.activeUsers || 0,
          totalVotes: stats.totalVotes || 0,
          avgPoints: stats.avgPoints || "0.0",
          lastUpdated: Date.now()
        };
        localStorage.setItem("scrumPokerStats", JSON.stringify(statsToSave));
        
        // UI'yi g√ºncelle
        const totalRoomsEl = document.getElementById("totalRooms");
        const activeUsersEl = document.getElementById("activeUsers");
        const totalVotesEl = document.getElementById("totalVotes");
        const avgPointsEl = document.getElementById("avgPoints");
        
        if (totalRoomsEl) totalRoomsEl.textContent = statsToSave.totalRooms;
        if (activeUsersEl) activeUsersEl.textContent = statsToSave.activeUsers;
        if (totalVotesEl) totalVotesEl.textContent = statsToSave.totalVotes;
        if (avgPointsEl) avgPointsEl.textContent = statsToSave.avgPoints;
      } else {
        // Hata durumunda localStorage'dan y√ºkle
        const totalRoomsEl = document.getElementById("totalRooms");
        const activeUsersEl = document.getElementById("activeUsers");
        const totalVotesEl = document.getElementById("totalVotes");
        const avgPointsEl = document.getElementById("avgPoints");
        
        if (totalRoomsEl) totalRoomsEl.textContent = savedStats.totalRooms || "0";
        if (activeUsersEl) activeUsersEl.textContent = savedStats.activeUsers || "0";
        if (totalVotesEl) totalVotesEl.textContent = savedStats.totalVotes || "0";
        if (avgPointsEl) avgPointsEl.textContent = savedStats.avgPoints || "0.0";
      }
    });
  } else {
    console.log("Socket hen√ºz baƒülanmadƒ±, localStorage'dan y√ºkleniyor");
    // localStorage'dan y√ºkle
    const totalRoomsEl = document.getElementById("totalRooms");
    const activeUsersEl = document.getElementById("activeUsers");
    const totalVotesEl = document.getElementById("totalVotes");
    const avgPointsEl = document.getElementById("avgPoints");
    
    if (totalRoomsEl) totalRoomsEl.textContent = savedStats.totalRooms || "0";
    if (activeUsersEl) activeUsersEl.textContent = savedStats.activeUsers || "0";
    if (totalVotesEl) totalVotesEl.textContent = savedStats.totalVotes || "0";
    if (avgPointsEl) avgPointsEl.textContent = savedStats.avgPoints || "0.0";
  }
}

// Baƒülantƒ± durumunu g√∂ster
function showConnectionStatus() {
  const statusDiv = document.getElementById("connectionStatus");
  const statusText = statusDiv?.querySelector(".status-text");
  const retryBtn = statusDiv?.querySelector(".btn-retry");
  
  if (!statusDiv) return;
  
  statusDiv.style.display = "block";
  
  const socket = initSocket();
  if (!socket) {
    if (statusText) statusText.textContent = "Socket.IO bulunamadƒ±! ‚ùå";
    if (retryBtn) retryBtn.style.display = "inline-block";
    return;
  }
  
  if (socket.connected) {
    if (statusText) statusText.textContent = "Sunucuya baƒülandƒ±! ‚úÖ";
    if (retryBtn) retryBtn.style.display = "none";
  } else {
    if (statusText) statusText.textContent = "Sunucuya baƒülanƒ±yor... ‚è≥";
    if (retryBtn) retryBtn.style.display = "none";
    
    // Event listener'larƒ± temizle ve yeniden ekle
    socket.off("connect");
    socket.off("connect_error");
    
    socket.on("connect", () => {
      if (statusText) statusText.textContent = "Sunucuya baƒülandƒ±! ‚úÖ";
      if (retryBtn) retryBtn.style.display = "none";
      showMsg("Sunucuya baƒülandƒ±! ‚úÖ", "info"); // success yerine info kullan
    });
    
    socket.on("connect_error", (error) => {
      if (statusText) statusText.textContent = "Sunucu baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z! ‚ùå";
      if (retryBtn) retryBtn.style.display = "inline-block";
      showMsg("Sunucu baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z! ‚ùå", "error");
    });
  }
}

// Baƒülantƒ±yƒ± yeniden dene
function retryConnection() {
  const statusDiv = document.getElementById("connectionStatus");
  if (!statusDiv) return;
  
  const statusText = statusDiv.querySelector(".status-text");
  const retryBtn = statusDiv.querySelector(".btn-retry");
  
  if (statusText) statusText.textContent = "Yeniden baƒülanƒ±lƒ±yor... ‚è≥";
  if (retryBtn) retryBtn.style.display = "none";
  
  // Mevcut socket'i kapat
  if (globalSocket) {
    globalSocket.disconnect();
    globalSocket = null;
  }
  
  // Yeni baƒülantƒ± kur
  setTimeout(() => {
    showConnectionStatus();
    updateRecentActivity();
    updateStats();
  }, 1000);
}

// Son aktiviteleri g√ºncelle
function updateRecentActivity() {
  const activityList = document.getElementById("recentActivity");
  if (!activityList) return;

  // √ñnce localStorage'dan mevcut aktiviteleri y√ºkle
  const savedActivities = JSON.parse(localStorage.getItem("scrumPokerActivities") || "[]");

  // Loading durumu g√∂ster
  activityList.innerHTML = `
    <div class="activity-item">
      <span class="activity-time">‚è≥</span>
      <span class="activity-text">Aktiviteler y√ºkleniyor...</span>
    </div>
  `;

  const socket = initSocket();
  if (!socket) {
    console.log("Socket baƒülantƒ±sƒ± kurulamadƒ±, localStorage'dan y√ºkleniyor");
    // localStorage'dan y√ºkle
    if (savedActivities.length > 0) {
      activityList.innerHTML = savedActivities
        .map(activity => `
          <div class="activity-item">
            <span class="activity-time">${activity.time}</span>
            <span class="activity-text">${activity.text}</span>
          </div>
        `)
        .join("");
    } else {
      activityList.innerHTML = `
        <div class="activity-item">
          <span class="activity-time">üéØ</span>
          <span class="activity-text">Hen√ºz aktivite yok - ƒ∞lk odayƒ± olu≈ütur!</span>
        </div>
      `;
    }
    return;
  }
  
  if (socket.connected) {
    socket.emit("getRecentActivities", (activities) => {
      if (activities && activities.length > 0) {
        // Aktiviteleri localStorage'a kaydet
        const activitiesToSave = activities.map(activity => ({
          time: activity.time,
          text: activity.text,
          timestamp: Date.now()
        }));
        localStorage.setItem("scrumPokerActivities", JSON.stringify(activitiesToSave));
        
        // UI'yi g√ºncelle
        activityList.innerHTML = activities
          .map(activity => `
            <div class="activity-item">
              <span class="activity-time">${activity.time}</span>
              <span class="activity-text">${activity.text}</span>
            </div>
          `)
          .join("");
      } else {
        // Hen√ºz aktivite yoksa
        activityList.innerHTML = `
          <div class="activity-item">
            <span class="activity-time">üéØ</span>
            <span class="activity-text">Hen√ºz aktivite yok - ƒ∞lk odayƒ± olu≈ütur!</span>
          </div>
        `;
      }
    });
  } else {
    // Socket hen√ºz baƒülanmadƒ±ysa, baƒülantƒ± bekleyelim
    // Event listener'larƒ± temizle ve yeniden ekle
    socket.off("connect");
    socket.off("connect_error");
    
    socket.on("connect", () => {
      socket.emit("getRecentActivities", (activities) => {
        if (activities && activities.length > 0) {
          activityList.innerHTML = activities
            .map(activity => `
              <div class="activity-item">
                <span class="activity-time">${activity.time}</span>
                <span class="activity-text">${activity.text}</span>
              </div>
            `)
            .join("");
        } else {
          // Hen√ºz aktivite yoksa
          activityList.innerHTML = `
            <div class="activity-item">
              <span class="activity-time">üéØ</span>
              <span class="activity-text">Hen√ºz aktivite yok - ƒ∞lk odayƒ± olu≈ütur!</span>
            </div>
          `;
        }
      });
    });
    
    // Baƒülantƒ± hatasƒ± durumunda
    socket.on("connect_error", (error) => {
      console.error("Aktivite baƒülantƒ± hatasƒ±:", error);
      activityList.innerHTML = `
        <div class="activity-item">
          <span class="activity-time">‚ö†Ô∏è</span>
          <span class="activity-text">Sunucu baƒülantƒ±sƒ± kurulamadƒ±</span>
        </div>
      `;
      
      // Baƒülantƒ± durumunu g√ºncelle
      const statusDiv = document.getElementById("connectionStatus");
      if (statusDiv) {
        const statusText = statusDiv.querySelector(".status-text");
        const retryBtn = statusDiv.querySelector(".btn-retry");
        if (statusText) statusText.textContent = "Sunucu baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z! ‚ùå";
        if (retryBtn) retryBtn.style.display = "inline-block";
      }
    });
    
    // Daha uzun timeout (30 saniye)
    setTimeout(() => {
      if (activityList.innerHTML.includes("y√ºkleniyor")) {
        activityList.innerHTML = `
          <div class="activity-item">
            <span class="activity-time">‚è∞</span>
            <span class="activity-text">Baƒülantƒ± zaman a≈üƒ±mƒ± - Sunucu √ßalƒ±≈üƒ±yor mu?</span>
          </div>
        `;
      }
    }, 30000); // 30 saniye timeout
  }
}
